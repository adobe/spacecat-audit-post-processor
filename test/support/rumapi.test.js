/*
 * Copyright 2023 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
/* eslint-env mocha */
/* eslint-disable no-unused-expressions */ // expect statements

import sinon from 'sinon';
import chai from 'chai';
import sinonChai from 'sinon-chai';
import chaiAsPromised from 'chai-as-promised';
import nock from 'nock';
import { generateDomainKey } from '../../src/support/rumapi.js';
import { nullKeyResponse, successKeyResponse, wrongKeyResponse } from './rumapi-data.js';

chai.use(sinonChai);
chai.use(chaiAsPromised);
const { expect } = chai;

const sandbox = sinon.createSandbox();
const mockDate = '2023-11-27T12:30:01.123Z';
const sevenDaysLater = '2023-12-04T12:30:01.123Z';

describe('rum api', () => {
  const uberKey = 'uber-key';
  const finalUrl = 'www.space.cat';
  const params = {
    domainkey: uberKey,
    url: finalUrl,
    expiry: sevenDaysLater,
    note: 'generated by spacecat alerting',
  };

  const log = {
    error: sandbox.stub(),
  };

  before('setup', function () {
    this.clock = sandbox.useFakeTimers({
      now: new Date(mockDate).getTime(),
    });
  });

  after('clean', () => {
    sandbox.restore();
  });

  afterEach('clean each', () => {
    nock.cleanAll();
  });

  it('rejects when rum api returns 500', async () => {
    nock('https://helix-pages.anywhere.run')
      .post('/helix-services/run-query@v3/rotate-domainkeys')
      .query(params)
      .reply(500);

    await expect(generateDomainKey(uberKey, finalUrl, log))
      .to.be.rejectedWith('Error during rum/rotate-domainkeys api call');
  });

  it('rejects when rum api returns invalid json', async () => {
    nock('https://helix-pages.anywhere.run')
      .post('/helix-services/run-query@v3/rotate-domainkeys')
      .query(params)
      .reply(200, 'invalid-json');

    await expect(generateDomainKey(uberKey, finalUrl, log))
      .to.be.rejectedWith('Error during rum/rotate-domainkeys api call');
  });

  it('rejects when rum api returns unexpected format', async () => {
    nock('https://helix-pages.anywhere.run')
      .post('/helix-services/run-query@v3/rotate-domainkeys')
      .query(params)
      .reply(200, '{ "key": "value" }');

    await expect(generateDomainKey(uberKey, finalUrl, log))
      .to.be.rejectedWith('Unexpected response format. $.results.data is not array');
  });

  it('rejects when rum api returns unsuccessful repsonse', async () => {
    nock('https://helix-pages.anywhere.run')
      .post('/helix-services/run-query@v3/rotate-domainkeys')
      .query(params)
      .reply(200, wrongKeyResponse);

    await expect(generateDomainKey(uberKey, finalUrl, log))
      .to.be.rejectedWith('Domain key response was not successful');
  });

  it('rejects when rum api returns null key', async () => {
    nock('https://helix-pages.anywhere.run')
      .post('/helix-services/run-query@v3/rotate-domainkeys')
      .query(params)
      .reply(200, nullKeyResponse);

    await expect(generateDomainKey(uberKey, finalUrl, log))
      .to.be.rejectedWith('Rum api returned null domain key');
  });

  it('returns scoped domain key when successful', async () => {
    nock('https://helix-pages.anywhere.run')
      .post('/helix-services/run-query@v3/rotate-domainkeys')
      .query(params)
      .reply(200, successKeyResponse);

    const resp = await generateDomainKey(uberKey, finalUrl, log);
    expect(resp).to.equal('scoped-domain-key');
  });
});
